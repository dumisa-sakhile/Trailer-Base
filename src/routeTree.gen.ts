/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchImport } from './routes/search'
import { Route as AuthRouteImport } from './routes/auth/route'
import { Route as IndexImport } from './routes/index'
import { Route as TvIndexImport } from './routes/tv/index'
import { Route as PeopleIndexImport } from './routes/people/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as TvTvIdImport } from './routes/tv/$tvId'
import { Route as PeoplePersonIdImport } from './routes/people/$personId'
import { Route as MovieMovieIdImport } from './routes/movie/$movieId'
import { Route as AuthVerifyImport } from './routes/auth/verify'
import { Route as AuthProfileImport } from './routes/auth/profile'
import { Route as TvListListImport } from './routes/tv/list/$list'
import { Route as MovieListListImport } from './routes/movie/list/$list'
import { Route as TvTypeTypeNameTypeIdImport } from './routes/tv/$type.$typeName.$typeId'
import { Route as MovieTypeTypeNameTypeIdImport } from './routes/movie/$type.$typeName.$typeId'

// Create/Update Routes

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TvIndexRoute = TvIndexImport.update({
  id: '/tv/',
  path: '/tv/',
  getParentRoute: () => rootRoute,
} as any)

const PeopleIndexRoute = PeopleIndexImport.update({
  id: '/people/',
  path: '/people/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRouteRoute,
} as any)

const TvTvIdRoute = TvTvIdImport.update({
  id: '/tv/$tvId',
  path: '/tv/$tvId',
  getParentRoute: () => rootRoute,
} as any)

const PeoplePersonIdRoute = PeoplePersonIdImport.update({
  id: '/people/$personId',
  path: '/people/$personId',
  getParentRoute: () => rootRoute,
} as any)

const MovieMovieIdRoute = MovieMovieIdImport.update({
  id: '/movie/$movieId',
  path: '/movie/$movieId',
  getParentRoute: () => rootRoute,
} as any)

const AuthVerifyRoute = AuthVerifyImport.update({
  id: '/verify',
  path: '/verify',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthProfileRoute = AuthProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthRouteRoute,
} as any)

const TvListListRoute = TvListListImport.update({
  id: '/tv/list/$list',
  path: '/tv/list/$list',
  getParentRoute: () => rootRoute,
} as any)

const MovieListListRoute = MovieListListImport.update({
  id: '/movie/list/$list',
  path: '/movie/list/$list',
  getParentRoute: () => rootRoute,
} as any)

const TvTypeTypeNameTypeIdRoute = TvTypeTypeNameTypeIdImport.update({
  id: '/tv/$type/$typeName/$typeId',
  path: '/tv/$type/$typeName/$typeId',
  getParentRoute: () => rootRoute,
} as any)

const MovieTypeTypeNameTypeIdRoute = MovieTypeTypeNameTypeIdImport.update({
  id: '/movie/$type/$typeName/$typeId',
  path: '/movie/$type/$typeName/$typeId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/auth/profile': {
      id: '/auth/profile'
      path: '/profile'
      fullPath: '/auth/profile'
      preLoaderRoute: typeof AuthProfileImport
      parentRoute: typeof AuthRouteImport
    }
    '/auth/verify': {
      id: '/auth/verify'
      path: '/verify'
      fullPath: '/auth/verify'
      preLoaderRoute: typeof AuthVerifyImport
      parentRoute: typeof AuthRouteImport
    }
    '/movie/$movieId': {
      id: '/movie/$movieId'
      path: '/movie/$movieId'
      fullPath: '/movie/$movieId'
      preLoaderRoute: typeof MovieMovieIdImport
      parentRoute: typeof rootRoute
    }
    '/people/$personId': {
      id: '/people/$personId'
      path: '/people/$personId'
      fullPath: '/people/$personId'
      preLoaderRoute: typeof PeoplePersonIdImport
      parentRoute: typeof rootRoute
    }
    '/tv/$tvId': {
      id: '/tv/$tvId'
      path: '/tv/$tvId'
      fullPath: '/tv/$tvId'
      preLoaderRoute: typeof TvTvIdImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/'
      fullPath: '/auth/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthRouteImport
    }
    '/people/': {
      id: '/people/'
      path: '/people'
      fullPath: '/people'
      preLoaderRoute: typeof PeopleIndexImport
      parentRoute: typeof rootRoute
    }
    '/tv/': {
      id: '/tv/'
      path: '/tv'
      fullPath: '/tv'
      preLoaderRoute: typeof TvIndexImport
      parentRoute: typeof rootRoute
    }
    '/movie/list/$list': {
      id: '/movie/list/$list'
      path: '/movie/list/$list'
      fullPath: '/movie/list/$list'
      preLoaderRoute: typeof MovieListListImport
      parentRoute: typeof rootRoute
    }
    '/tv/list/$list': {
      id: '/tv/list/$list'
      path: '/tv/list/$list'
      fullPath: '/tv/list/$list'
      preLoaderRoute: typeof TvListListImport
      parentRoute: typeof rootRoute
    }
    '/movie/$type/$typeName/$typeId': {
      id: '/movie/$type/$typeName/$typeId'
      path: '/movie/$type/$typeName/$typeId'
      fullPath: '/movie/$type/$typeName/$typeId'
      preLoaderRoute: typeof MovieTypeTypeNameTypeIdImport
      parentRoute: typeof rootRoute
    }
    '/tv/$type/$typeName/$typeId': {
      id: '/tv/$type/$typeName/$typeId'
      path: '/tv/$type/$typeName/$typeId'
      fullPath: '/tv/$type/$typeName/$typeId'
      preLoaderRoute: typeof TvTypeTypeNameTypeIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthProfileRoute: typeof AuthProfileRoute
  AuthVerifyRoute: typeof AuthVerifyRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthProfileRoute: AuthProfileRoute,
  AuthVerifyRoute: AuthVerifyRoute,
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/search': typeof SearchRoute
  '/auth/profile': typeof AuthProfileRoute
  '/auth/verify': typeof AuthVerifyRoute
  '/movie/$movieId': typeof MovieMovieIdRoute
  '/people/$personId': typeof PeoplePersonIdRoute
  '/tv/$tvId': typeof TvTvIdRoute
  '/auth/': typeof AuthIndexRoute
  '/people': typeof PeopleIndexRoute
  '/tv': typeof TvIndexRoute
  '/movie/list/$list': typeof MovieListListRoute
  '/tv/list/$list': typeof TvListListRoute
  '/movie/$type/$typeName/$typeId': typeof MovieTypeTypeNameTypeIdRoute
  '/tv/$type/$typeName/$typeId': typeof TvTypeTypeNameTypeIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/search': typeof SearchRoute
  '/auth/profile': typeof AuthProfileRoute
  '/auth/verify': typeof AuthVerifyRoute
  '/movie/$movieId': typeof MovieMovieIdRoute
  '/people/$personId': typeof PeoplePersonIdRoute
  '/tv/$tvId': typeof TvTvIdRoute
  '/auth': typeof AuthIndexRoute
  '/people': typeof PeopleIndexRoute
  '/tv': typeof TvIndexRoute
  '/movie/list/$list': typeof MovieListListRoute
  '/tv/list/$list': typeof TvListListRoute
  '/movie/$type/$typeName/$typeId': typeof MovieTypeTypeNameTypeIdRoute
  '/tv/$type/$typeName/$typeId': typeof TvTypeTypeNameTypeIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/search': typeof SearchRoute
  '/auth/profile': typeof AuthProfileRoute
  '/auth/verify': typeof AuthVerifyRoute
  '/movie/$movieId': typeof MovieMovieIdRoute
  '/people/$personId': typeof PeoplePersonIdRoute
  '/tv/$tvId': typeof TvTvIdRoute
  '/auth/': typeof AuthIndexRoute
  '/people/': typeof PeopleIndexRoute
  '/tv/': typeof TvIndexRoute
  '/movie/list/$list': typeof MovieListListRoute
  '/tv/list/$list': typeof TvListListRoute
  '/movie/$type/$typeName/$typeId': typeof MovieTypeTypeNameTypeIdRoute
  '/tv/$type/$typeName/$typeId': typeof TvTypeTypeNameTypeIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/search'
    | '/auth/profile'
    | '/auth/verify'
    | '/movie/$movieId'
    | '/people/$personId'
    | '/tv/$tvId'
    | '/auth/'
    | '/people'
    | '/tv'
    | '/movie/list/$list'
    | '/tv/list/$list'
    | '/movie/$type/$typeName/$typeId'
    | '/tv/$type/$typeName/$typeId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/search'
    | '/auth/profile'
    | '/auth/verify'
    | '/movie/$movieId'
    | '/people/$personId'
    | '/tv/$tvId'
    | '/auth'
    | '/people'
    | '/tv'
    | '/movie/list/$list'
    | '/tv/list/$list'
    | '/movie/$type/$typeName/$typeId'
    | '/tv/$type/$typeName/$typeId'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/search'
    | '/auth/profile'
    | '/auth/verify'
    | '/movie/$movieId'
    | '/people/$personId'
    | '/tv/$tvId'
    | '/auth/'
    | '/people/'
    | '/tv/'
    | '/movie/list/$list'
    | '/tv/list/$list'
    | '/movie/$type/$typeName/$typeId'
    | '/tv/$type/$typeName/$typeId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  SearchRoute: typeof SearchRoute
  MovieMovieIdRoute: typeof MovieMovieIdRoute
  PeoplePersonIdRoute: typeof PeoplePersonIdRoute
  TvTvIdRoute: typeof TvTvIdRoute
  PeopleIndexRoute: typeof PeopleIndexRoute
  TvIndexRoute: typeof TvIndexRoute
  MovieListListRoute: typeof MovieListListRoute
  TvListListRoute: typeof TvListListRoute
  MovieTypeTypeNameTypeIdRoute: typeof MovieTypeTypeNameTypeIdRoute
  TvTypeTypeNameTypeIdRoute: typeof TvTypeTypeNameTypeIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  SearchRoute: SearchRoute,
  MovieMovieIdRoute: MovieMovieIdRoute,
  PeoplePersonIdRoute: PeoplePersonIdRoute,
  TvTvIdRoute: TvTvIdRoute,
  PeopleIndexRoute: PeopleIndexRoute,
  TvIndexRoute: TvIndexRoute,
  MovieListListRoute: MovieListListRoute,
  TvListListRoute: TvListListRoute,
  MovieTypeTypeNameTypeIdRoute: MovieTypeTypeNameTypeIdRoute,
  TvTypeTypeNameTypeIdRoute: TvTypeTypeNameTypeIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/search",
        "/movie/$movieId",
        "/people/$personId",
        "/tv/$tvId",
        "/people/",
        "/tv/",
        "/movie/list/$list",
        "/tv/list/$list",
        "/movie/$type/$typeName/$typeId",
        "/tv/$type/$typeName/$typeId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth/route.tsx",
      "children": [
        "/auth/profile",
        "/auth/verify",
        "/auth/"
      ]
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/auth/profile": {
      "filePath": "auth/profile.tsx",
      "parent": "/auth"
    },
    "/auth/verify": {
      "filePath": "auth/verify.tsx",
      "parent": "/auth"
    },
    "/movie/$movieId": {
      "filePath": "movie/$movieId.tsx"
    },
    "/people/$personId": {
      "filePath": "people/$personId.tsx"
    },
    "/tv/$tvId": {
      "filePath": "tv/$tvId.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.tsx",
      "parent": "/auth"
    },
    "/people/": {
      "filePath": "people/index.tsx"
    },
    "/tv/": {
      "filePath": "tv/index.tsx"
    },
    "/movie/list/$list": {
      "filePath": "movie/list/$list.tsx"
    },
    "/tv/list/$list": {
      "filePath": "tv/list/$list.tsx"
    },
    "/movie/$type/$typeName/$typeId": {
      "filePath": "movie/$type.$typeName.$typeId.tsx"
    },
    "/tv/$type/$typeName/$typeId": {
      "filePath": "tv/$type.$typeName.$typeId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
